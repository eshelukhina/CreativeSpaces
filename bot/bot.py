import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
import os


BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–æ–ª–∏: user_id -> "resident" / "organizer" / "moderator"
user_roles = {}

# --- START / ROLE SELECTION ---

@dp.message(Command("start"))
async def start_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üßë –Ø —Ä–µ–∑–∏–¥–µ–Ω—Ç")],
            [KeyboardButton(text="üìÖ –Ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä")],
            [KeyboardButton(text="üõ† –Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram-–±–æ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
        reply_markup=keyboard
    )

@dp.message(lambda msg: msg.text in ["üßë –Ø —Ä–µ–∑–∏–¥–µ–Ω—Ç", "üìÖ –Ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", "üõ† –Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä"])
async def set_role(message: Message):
    role_map = {
        "üßë –Ø —Ä–µ–∑–∏–¥–µ–Ω—Ç": "resident",
        "üìÖ –Ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä": "organizer",
        "üõ† –Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä": "moderator"
    }
    role = role_map[message.text]
    user_roles[message.from_user.id] = role
    await message.answer(
        f"‚úÖ –í–∞—à–∞ —Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {role.capitalize()}.\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
    )

# --- ROLE CHECK DECORATOR ---

def require_role(allowed_roles):
    async def checker(message: Message):
        return user_roles.get(message.from_user.id) in allowed_roles
    return checker

# --- RESIDENT COMMANDS ---

@dp.message(Command("search"))
async def search_people(message: Message):
    if user_roles.get(message.from_user.id) != "resident":
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º.")
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–¥–∏–∑–∞–π–Ω') –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤.")

@dp.message(Command("subscribe"))
async def subscribe_topics(message: Message):
    if user_roles.get(message.from_user.id) != "resident":
        return await message.answer("‚õî –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º.")
    await message.answer("üì¨ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö.")

@dp.message(Command("respond"))
async def respond_to_opportunity(message: Message):
    if user_roles.get(message.from_user.id) != "resident":
        return await message.answer("‚õî –û—Ç–∫–ª–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º.")
    await message.answer("‚úâÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é. –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ—ë.")

# --- ORGANIZER COMMANDS ---

@dp.message(Command("new_event"))
async def publish_event(message: Message):
    if user_roles.get(message.from_user.id) != "organizer":
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.")
    await message.answer("üì¢ –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –ª–µ–Ω—Ç—É.")

@dp.message(Command("myevents"))
async def list_events(message: Message):
    if user_roles.get(message.from_user.id) != "organizer":
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è.")
    await message.answer("üìÖ –í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n1. –í–æ—Ä–∫—à–æ–ø –ø–æ –¥–∏–∑–∞–π–Ω—É (22 –º–∞—è)\n2. Meetup: –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç (25 –º–∞—è)")

# --- MODERATOR COMMANDS ---

@dp.message(Command("moderate"))
async def moderate_interface(message: Message):
    if user_roles.get(message.from_user.id) != "moderator":
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
    await message.answer("üõ† –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∑–∞—è–≤–∫–∏, –∂–∞–ª–æ–±—ã –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

@dp.message(Command("newusers"))
async def new_users_notification(message: Message):
    if user_roles.get(message.from_user.id) != "moderator":
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
    await message.answer("üÜï –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n- @anna_design\n- @art_vision\n- @soundlab")

# --- HELP MENU ---

@dp.message(Command("help"))
async def help_handler(message: Message):
    role = user_roles.get(message.from_user.id)
    if role == "resident":
        await message.answer("""üë§ –†–µ–∑–∏–¥–µ–Ω—Ç ‚Äî –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  /search ‚Äî –Ω–∞–π—Ç–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
  /subscribe ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—ã
  /respond ‚Äî –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
""")
    elif role == "organizer":
        await message.answer("""üìÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä ‚Äî –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  /new_event ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
  /myevents ‚Äî –º–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
""")
    elif role == "moderator":
        await message.answer("""üõ† –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ‚Äî –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  /moderate ‚Äî –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  /newusers ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
""")
    else:
        await message.answer("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å.")

# --- BOT RUNNER ---

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())